<?php

/**
 * @file
 * Module File.
 */

use Bluecadet\DrupalPackageManager\Checker;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\FileInterface;
use Drupal\update\UpdateManagerInterface;

const BCU_IMG_GEN_STATE = 'bluecadet_utilities.image_style_gen';

/**
 * Implements hook_theme().
 */
function bluecadet_utilities_theme($existing, $type, $theme, $path) {
  return [
    'svg_image' => [
      'variables' => ['path' => NULL, 'attributes' => []],
    ],
    'input__simple_format_textfield' => [
      'base hook' => 'input',
    ],
  ];
}

/**
 * Implements template_preprocess_hook().
 */
function template_preprocess_svg_image(&$vars) {
  $file_system = \Drupal::service("file_system");
  if (is_file($vars['path']) || is_file($file_system->realpath($vars['path']))) {
    $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');
    $scheme = $stream_wrapper_manager->getScheme($vars['path']);

    if (!$scheme) {
      $file_str = file_get_contents($file_system->realpath($vars['path']));
    }
    else {
      $file_str = file_get_contents($vars['path']);
    }

    $pattern = "/<\?xml(.*)\?>/s";
    $vars['svg'] = preg_replace($pattern, '', $file_str, 1, $count);
  }
}

/**
 * Implements template_preprocess_hook().
 */
function template_preprocess_input__simple_format_textfield(&$vars) {
  $vars['buttons'] = $vars['element']['#buttons_render'];

  $vars['editable_attributes'] = [
    'contentEditable' => TRUE,
    'class' => ['content-editable'],
  ];

  if (isset($vars['attributes']['required']) && $vars['attributes']['required'] == "required") {
    $vars['attributes']['data-required'] = "required";
  }
}

/**
 * Implements hook_file_validate().
 */
function bluecadet_utilities_file_validate(FileInterface $file) {
  $config = \Drupal::config('bluecadet_utilities.settings');

  if ($config->get('use_transliteration') && isset($file->destination)) {
    $file_system = \Drupal::service("file_system");
    $basename = $file_system->basename($file->destination);
    $basename = bluecadet_utilities_transliterate_filenames_transliteration($basename);
    $dirname = $file_system->dirname($file->destination);
    $file->destination = $file_system->createFilename($basename, $dirname);
  }
}

/**
 * Implements callback for hook_file_validate().
 */
function bluecadet_utilities_transliterate_filenames_transliteration($filename) {
  $filename = \Drupal::service('bluecadet_utilities.sanitize_name')->sanitizeFilename($filename);

  // For empty.
  $name = explode('.', $filename);
  $name = reset($name);
  $extension = explode(".", $filename);
  $extension = end($extension);

  // Is empty.
  if (!$name) {
    $filename = md5(rand(0, getrandmax())) . '.' . $extension;
  }

  return $filename;
}

/**
 * Implements hook_editor_info_alter().
 */
function bluecadet_utilities_editor_info_alter(array &$editors) {
  $config = \Drupal::config('bluecadet_utilities.settings');

  if ($config->get('use_textfield_wysiwyg')) {
    $editors['ckeditor']['supported_element_types'][] = 'textfield';
  }
}

/**
 * Implements hook_form_alter().
 */
function bluecadet_utilities_form_alter(&$form, FormStateInterface $form_state) {
  if (in_array($form['#form_id'], [
    "bcu_img_style_generator",
    "bcu_image_style_generator_settings",
  ])) {
    $form['#attached']['library'][] = 'bluecadet_utilities/img-gen';
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function bluecadet_utilities_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $config = \Drupal::config('bluecadet_utilities.settings');

  if ($config->get('use_textfield_wysiwyg')) {
    if (isset($element['#type']) && $element['#type'] == 'text_format' && $element['#base_type'] == 'textfield') {
      $element['#attached']['library'][] = 'bluecadet_utilities/text-editor';
      $element['#attributes']['class'][] = 'text-format-editor';
    }
  }
}

/**
 * Implements hook_update_status_alter().
 */
function bluecadet_utilities_update_status_alter(&$projects) {
  $modules['bluecadet'] = [
    'bluecadet_utilities',
    'bluecadet_file_struct',
  ];

  $filtered_projects = [];

  foreach ($modules as $user => $user_data) {
    $filtered_projects += array_filter($projects, function($v) use ($user_data) {
        return in_array($v, $user_data);
    }, ARRAY_FILTER_USE_KEY);
  }

  $checker = new Checker($modules, $filtered_projects);

  foreach ($modules as $user => $user_data) {
    foreach ($user_data as $module_name) {
      if (in_array($module_name, array_keys($projects))) {
        $projects[$module_name] = $checker->updateDrupalModulePackage($projects[$module_name], $user, $module_name);
      }
    }
  }
}
